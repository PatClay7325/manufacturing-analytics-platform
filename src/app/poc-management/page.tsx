'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { 
  Calendar, Clock, Target, AlertTriangle, CheckCircle, XCircle, 
  TrendingUp, TrendingDown, BarChart3, Activity, Users, 
  PlayCircle, PauseCircle, SkipForward, ArrowRight, 
  FileText, Download, Upload, RefreshCw, Settings,
  Filter, Search, ChevronDown, ChevronRight,
  Zap, Shield, Database, Cog, Globe, MessageSquare, Plus, Edit,
  Brain, Server, Bug, Timer, TestTube
} from 'lucide-react';
import ProgressTracker from '@/components/poc/ProgressTracker';
import { usePOCData, Task, Milestone } from '@/hooks/usePOCData';
import TaskEditModal from '@/components/poc/TaskEditModal';
import GanttChart from '@/components/poc/GanttChart';
import KanbanBoard from '@/components/poc/KanbanBoard';
import LiveProjectStatus from '@/components/poc/LiveProjectStatus';
import { useLiveProjectData } from '@/hooks/useLiveProjectData';

const POCManagementPage = () => {
  const [activeView, setActiveView] = useState<'gantt' | 'kanban' | 'timeline' | 'dashboard' | 'assessment'>('dashboard');
  const [timeRange, setTimeRange] = useState<'today' | 'week' | 'month'>('week');
  const [filterCategory, setFilterCategory] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);
  const [editingTask, setEditingTask] = useState<Task | null>(null);
  const [showAutoSaveStatus, setShowAutoSaveStatus] = useState(false);

  // Use POC Data Hook
  const {
    tasks,
    milestones,
    metrics,
    lastSaved,
    addTask,
    updateTask,
    deleteTask,
    updateTaskStatus,
    updateTaskProgress,
    getCriticalPathTasks,
    getTasksByStatus,
    exportData,
    importData
  } = usePOCData();

  // Use Live Project Data Hook
  const { 
    tasks: liveTasks, 
    metrics: liveMetrics,
    issues: liveIssues,
    recommendations: liveRecommendations,
    isLive,
    forceRefresh: forceLiveScan
  } = useLiveProjectData(30000); // Refresh every 30 seconds

  // Merge manual tasks with auto-detected live tasks
  const mergedTasks = useMemo(() => {
    const manualTasks = tasks.filter(t => !(t as any).autoGenerated);
    const autoTasks = liveTasks.map(t => ({ ...t, autoGenerated: true }));
    return [...manualTasks, ...autoTasks];
  }, [tasks, liveTasks]);

  // POC Data from metrics - use live metrics when available
  const pocStartDate = '2025-06-25';
  const pocEndDate = '2025-08-25';
  
  // Merge live metrics with POC metrics
  const combinedMetrics = {
    daysRemaining: metrics.daysRemaining,
    totalTasks: isLive ? liveMetrics.totalTasks + tasks.length : metrics.totalTasks,
    completedTasks: isLive ? liveMetrics.completedTasks + metrics.completedTasks : metrics.completedTasks,
    overallProgress: isLive ? Math.round((liveMetrics.overallProgress + metrics.overallProgress) / 2) : metrics.overallProgress,
    criticalPathBlocked: metrics.criticalPathBlocked || (isLive && liveMetrics.blockedTasks > 0),
    blockedTasks: isLive ? liveMetrics.blockedTasks + metrics.blockedTasks : metrics.blockedTasks,
    atRiskTasks: metrics.atRiskTasks,
    buildStatus: liveMetrics.buildStatus,
    testCoverage: liveMetrics.testCoverage,
    typeErrors: liveMetrics.typeErrors,
    todoCount: liveMetrics.todoCount
  };

  const {
    daysRemaining,
    totalTasks,
    completedTasks,
    overallProgress,
    criticalPathBlocked,
    blockedTasks,
    atRiskTasks
  } = combinedMetrics;

  // Get critical path tasks and today's tasks from merged data
  const criticalPathTasks = useMemo(() => {
    const manualCritical = getCriticalPathTasks();
    const autoCritical = mergedTasks.filter(t => 
      (t as any).autoGenerated && t.priority === 'critical'
    );
    return [...manualCritical, ...autoCritical];
  }, [getCriticalPathTasks, mergedTasks]);

  const todaysTasks = getTasksByStatus('in-progress').slice(0, 3).map(task => ({
    id: task.id,
    task: task.name,
    priority: task.priority,
    estimatedTime: `${task.estimatedHours}h`,
    status: task.progress > 0 ? 'in-progress' : 'pending'
  }));

  // Generate risk indicators from current data including live issues
  const riskIndicators = [
    ...(criticalPathBlocked ? [{ 
      type: 'critical' as const, 
      message: 'Critical path tasks are blocked', 
      impact: 'high' as const 
    }] : []),
    ...(blockedTasks > 0 ? [{ 
      type: 'warning' as const, 
      message: `${blockedTasks} tasks are currently blocked`, 
      impact: 'medium' as const 
    }] : []),
    ...(atRiskTasks > 0 ? [{ 
      type: 'attention' as const, 
      message: `${atRiskTasks} tasks are at risk`, 
      impact: 'medium' as const 
    }] : []),
    ...(daysRemaining < 30 ? [{ 
      type: 'warning' as const, 
      message: `Only ${daysRemaining} days remaining in POC`, 
      impact: 'high' as const 
    }] : []),
    // Add live detected issues
    ...(isLive && liveMetrics.buildStatus === 'failing' ? [{ 
      type: 'critical' as const, 
      message: '🔴 Build is currently failing - blocking deployment', 
      impact: 'high' as const 
    }] : []),
    ...(isLive && liveMetrics.typeErrors > 0 ? [{ 
      type: 'warning' as const, 
      message: `⚠️ ${liveMetrics.typeErrors} TypeScript errors detected`, 
      impact: 'medium' as const 
    }] : []),
    ...(isLive && liveMetrics.todoCount > 20 ? [{ 
      type: 'attention' as const, 
      message: `📝 ${liveMetrics.todoCount} TODOs found in codebase`, 
      impact: 'low' as const 
    }] : [])
  ];

  // Auto-save status display
  useEffect(() => {
    if (lastSaved) {
      setShowAutoSaveStatus(true);
      const timer = setTimeout(() => setShowAutoSaveStatus(false), 3000);
      return () => clearTimeout(timer);
    }
  }, [lastSaved]);

  // Task management handlers
  const handleAddTask = () => {
    setEditingTask(null);
    setIsTaskModalOpen(true);
  };

  const handleEditTask = (task: Task) => {
    setEditingTask(task);
    setIsTaskModalOpen(true);
  };

  const handleSaveTask = (taskData: Task) => {
    if (editingTask) {
      updateTask(editingTask.id, taskData);
    } else {
      addTask(taskData);
    }
    setIsTaskModalOpen(false);
    setEditingTask(null);
  };

  const handleExportData = () => {
    const data = exportData();
    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `poc-management-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    URL.revokeObjectURL(url);
  };

  const handleImportData = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const importedData = JSON.parse(e.target?.result as string);
        const success = importData(importedData);
        if (success) {
          alert('Data imported successfully!');
        } else {
          alert('Failed to import data. Please check the file format.');
        }
      } catch (error) {
        alert('Invalid file format. Please select a valid JSON file.');
      }
    };
    reader.readAsText(file);
    event.target.value = ''; // Reset input
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'text-green-600 bg-green-100';
      case 'in-progress': return 'text-blue-600 bg-blue-100';
      case 'at-risk': return 'text-yellow-600 bg-yellow-100';
      case 'blocked': return 'text-red-600 bg-red-100';
      case 'not-started': return 'text-gray-600 bg-gray-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'text-red-700 bg-red-50 border-red-200';
      case 'high': return 'text-orange-700 bg-orange-50 border-orange-200';
      case 'medium': return 'text-yellow-700 bg-yellow-50 border-yellow-200';
      case 'low': return 'text-green-700 bg-green-50 border-green-200';
      default: return 'text-gray-700 bg-gray-50 border-gray-200';
    }
  };

  // Updated POC Status Assessment Data
  const pocAssessment = {
    currentStatus: 'RECOVERY_MODE',
    overallCompletion: 65, // Updated from 25% after fixes
    lastUpdated: '2025-06-25',
    successProbability: 70, // Improved from 25%
    criticalIssues: [
      {
        id: 'schema-fixed',
        title: 'Prisma Schema Validation',
        status: 'RESOLVED',
        impact: 'CRITICAL',
        description: 'Schema validation errors preventing application startup',
        resolution: 'Multi-schema configuration removed, clean ISO 22400-compliant schema implemented',
        completedDate: '2025-06-25'
      },
      {
        id: 'build-pending',
        title: 'Build System Failure', 
        status: 'PENDING',
        impact: 'CRITICAL',
        description: 'npm run build crashes with "Bus error (core dumped)"',
        blockers: ['Memory allocation issues', 'Circular dependencies possible'],
        estimatedResolution: '2-3 days'
      },
      {
        id: 'ai-partially-complete',
        title: 'AI Implementation Gaps',
        status: 'IN_PROGRESS', 
        impact: 'HIGH',
        description: 'ManufacturingEngineeringAgent methods partially implemented',
        progress: 75,
        completedMethods: ['OEE Analysis', 'Quality Analysis', 'Downtime Analysis'],
        pendingMethods: ['Maintenance Analysis', 'Root Cause Analysis', 'Trending Analysis']
      }
    ],
    tasksByPriority: [
      {
        id: 'recovery-1',
        title: 'Fix Build System Failure',
        category: 'Infrastructure',
        priority: 'CRITICAL',
        status: 'PENDING',
        estimatedEffort: '16-24 hours',
        dependencies: ['Schema validation fixed'],
        acceptanceCriteria: [
          'npm run build completes successfully',
          'Production build serves without errors', 
          'TypeScript compilation clean',
          'No memory allocation failures'
        ],
        risksIfDelayed: 'Cannot deploy or demo - POC fails',
        assignedTo: 'Lead Developer + DevOps',
        targetCompletion: '2025-06-27'
      },
      {
        id: 'recovery-2', 
        title: 'Verify Application Startup',
        category: 'Infrastructure',
        priority: 'CRITICAL',
        status: 'PENDING',
        estimatedEffort: '4-8 hours',
        dependencies: ['Build system working'],
        acceptanceCriteria: [
          'npm run dev starts without crashes',
          'Health check endpoint returns 200 OK',
          'API endpoints respond within 2 seconds',
          'Database connection stable'
        ],
        risksIfDelayed: 'Non-functional system for development',
        assignedTo: 'Lead Developer',
        targetCompletion: '2025-06-27'
      },
      {
        id: 'recovery-3',
        title: 'Create Manufacturing Sample Data',
        category: 'Data Engineering', 
        priority: 'HIGH',
        status: 'PENDING',
        estimatedEffort: '24-32 hours',
        dependencies: ['Database schema stable'],
        acceptanceCriteria: [
          '≥30 days of OEE data for 3 production lines',
          'Realistic downtime events with causes',
          'Equipment hierarchy and shift patterns',
          'Data validates ISO 22400 standards'
        ],
        risksIfDelayed: 'No realistic demo data - poor user validation',
        assignedTo: 'Data Engineer',
        targetCompletion: '2025-06-30'
      },
      {
        id: 'recovery-4',
        title: 'Complete AI Agent Methods',
        category: 'AI Development',
        priority: 'HIGH', 
        status: 'IN_PROGRESS',
        progress: 75,
        estimatedEffort: '16-20 hours',
        dependencies: ['Sample data available'],
        acceptanceCriteria: [
          'All analysis methods return meaningful results',
          'Query response time <3 seconds average',
          'Accuracy >80% on test scenarios',
          'Error handling for edge cases'
        ],
        risksIfDelayed: 'AI appears incomplete - low user confidence',
        assignedTo: 'AI/Backend Developer',
        targetCompletion: '2025-07-02'
      },
      {
        id: 'recovery-5',
        title: 'Dashboard Real Data Integration',
        category: 'Frontend',
        priority: 'HIGH',
        status: 'PENDING',
        estimatedEffort: '12-16 hours', 
        dependencies: ['Sample data', 'AI methods complete'],
        acceptanceCriteria: [
          'OEE dashboard shows live data',
          'Charts update from database queries',
          'Export functions work with real data',
          'Loading states and error handling'
        ],
        risksIfDelayed: 'Dashboard appears non-functional',
        assignedTo: 'Frontend Developer',
        targetCompletion: '2025-07-03'
      },
      {
        id: 'recovery-6',
        title: 'End-to-End Integration Testing',
        category: 'Quality Assurance',
        priority: 'HIGH',
        status: 'PENDING',
        estimatedEffort: '16-20 hours',
        dependencies: ['All core components working'],
        acceptanceCriteria: [
          'Chat → AI → Database → Dashboard workflow',
          'Error recovery and graceful degradation', 
          'Performance under realistic load',
          'All user scenarios tested'
        ],
        risksIfDelayed: 'System failures during demo',
        assignedTo: 'QA Engineer + Team',
        targetCompletion: '2025-07-05'
      }
    ],
    weeklyProgress: [
      {
        week: 'Week 1 (Jun 25-Jul 1)',
        theme: 'Emergency Recovery',
        status: 'IN_PROGRESS',
        keyObjectives: [
          'Fix all blocking technical issues',
          'Verify system operational status',
          'Create foundation for development'
        ],
        deliverables: [
          'Working build system',
          'Stable application startup', 
          'Basic sample data',
          'Docker stack operational'
        ],
        riskLevel: 'HIGH',
        successCriteria: 'System fully operational with sample data'
      },
      {
        week: 'Week 2-3 (Jul 2-15)',
        theme: 'Core Implementation',
        status: 'PLANNED',
        keyObjectives: [
          'Complete AI functionality',
          'Dashboard data integration',
          'Performance optimization'
        ],
        deliverables: [
          'Complete AI agent methods',
          'Live dashboard with real data',
          'Optimized query performance',
          'Error handling implementation'
        ],
        riskLevel: 'MEDIUM',
        successCriteria: 'End-to-end workflow functional'
      },
      {
        week: 'Week 4-5 (Jul 16-29)',
        theme: 'User Validation',
        status: 'PLANNED', 
        keyObjectives: [
          'User validation sessions',
          'Feedback integration',
          'Polish and refinement'
        ],
        deliverables: [
          '3 user validation sessions completed',
          'Critical feedback implemented',
          'Demo preparation',
          'Documentation complete'
        ],
        riskLevel: 'MEDIUM',
        successCriteria: '≥7/10 average user satisfaction'
      },
      {
        week: 'Week 6-8 (Jul 30-Aug 15)',
        theme: 'Demo & Documentation',
        status: 'PLANNED',
        keyObjectives: [
          'Demo preparation',
          'Technical documentation',
          'Phase 2 planning'
        ],
        deliverables: [
          '15-minute demo script',
          'Complete documentation',
          'Phase 2 roadmap',
          'Business case materials'
        ],
        riskLevel: 'LOW',
        successCriteria: 'Professional demo delivers value story'
      }
    ],
    keyImprovements: [
      {
        component: 'Database Schema',
        before: 'Multiple validation errors, build failures',
        after: 'Clean ISO 22400-compliant schema, generation works',
        impact: 'CRITICAL - Enabled development progress'
      },
      {
        component: 'AI Implementation', 
        before: 'Placeholder methods, no real analysis',
        after: '75% complete with working OEE, quality, downtime analysis',
        impact: 'HIGH - Demonstrates core value proposition'
      },
      {
        component: 'Project Management',
        before: 'Unrealistic assessment, poor planning',
        after: 'Honest evaluation, recovery plan, realistic timeline',
        impact: 'HIGH - Enables informed decision making'
      }
    ],
    riskAssessment: {
      technicalRisks: [
        {
          risk: 'Build system complexity underestimated',
          probability: 60,
          impact: 'HIGH',
          mitigation: 'Bring in DevOps specialist, simplify build process'
        },
        {
          risk: 'Integration challenges between components',
          probability: 70,
          impact: 'MEDIUM', 
          mitigation: 'Daily integration testing, dedicated integration engineer'
        },
        {
          risk: 'Performance issues under load',
          probability: 50,
          impact: 'MEDIUM',
          mitigation: 'Early load testing, query optimization'
        }
      ],
      userRisks: [
        {
          risk: 'User feedback negative due to incomplete features',
          probability: 60,
          impact: 'HIGH',
          mitigation: 'Focus on single use case excellence, manage expectations'
        },
        {
          risk: 'Demo technical failures',
          probability: 40,
          impact: 'HIGH', 
          mitigation: 'Backup static demo, comprehensive testing'
        }
      ],
      businessRisks: [
        {
          risk: 'Stakeholder confidence lost due to delays',
          probability: 50,
          impact: 'HIGH',
          mitigation: 'Transparent communication, realistic commitments'
        }
      ]
    },
    successMetrics: {
      technical: [
        { metric: 'Application Uptime', target: '>99%', current: 'Not measured' },
        { metric: 'API Response Time', target: '<2 seconds', current: 'Not measured' },
        { metric: 'Build Success Rate', target: '100%', current: '0% (failing)' },
        { metric: 'Test Coverage', target: '>80%', current: '~40%' }
      ],
      user: [
        { metric: 'Task Completion Rate', target: '>90%', current: 'Not tested' },
        { metric: 'User Satisfaction', target: '≥7/10', current: 'Not measured' },
        { metric: 'Time to First Insight', target: '<5 minutes', current: 'Not measured' }
      ],
      business: [
        { metric: 'ROI Demonstration', target: 'Clear positive', current: 'Unclear' },
        { metric: 'Phase 2 Buy-in', target: '>80% stakeholder support', current: 'Not assessed' }
      ]
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header - Microsoft Project Style */}
      <div className="bg-white border-b border-gray-200 shadow-sm">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <div className="flex items-center space-x-4">
                <div>
                  <h1 className="text-2xl font-semibold text-gray-900">POC Project Management</h1>
                  <p className="text-sm text-gray-600 mt-1">Manufacturing Intelligence Platform - 60 Day Sprint</p>
                </div>
                {showAutoSaveStatus && lastSaved && (
                  <div className="flex items-center space-x-2 text-green-600 text-sm">
                    <CheckCircle className="h-4 w-4" />
                    <span>Auto-saved at {lastSaved.toLocaleTimeString()}</span>
                  </div>
                )}
              </div>
            </div>
            <div className="flex items-center space-x-4">
              {/* Action Buttons */}
              <div className="flex items-center space-x-2">
                <button
                  onClick={handleAddTask}
                  className="flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  <Plus className="h-4 w-4" />
                  <span>Add Task</span>
                </button>
                <button
                  onClick={handleExportData}
                  className="flex items-center space-x-2 px-3 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
                >
                  <Download className="h-4 w-4" />
                  <span>Export</span>
                </button>
                <label className="flex items-center space-x-2 px-3 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors cursor-pointer">
                  <Upload className="h-4 w-4" />
                  <span>Import</span>
                  <input
                    type="file"
                    accept=".json"
                    onChange={handleImportData}
                    className="hidden"
                  />
                </label>
              </div>
              <div className="text-right">
                <div className="text-sm text-gray-500">Days Remaining</div>
                <div className="text-2xl font-bold text-red-600">{daysRemaining}</div>
              </div>
              <div className="text-right">
                <div className="text-sm text-gray-500">Overall Progress</div>
                <div className="text-2xl font-bold text-blue-600">{overallProgress}%</div>
              </div>
            </div>
          </div>
        </div>

        {/* View Tabs */}
        <div className="px-6">
          <div className="flex space-x-8 border-b border-gray-200">
            {[
              { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
              { id: 'assessment', label: 'POC Assessment', icon: Brain },
              { id: 'gantt', label: 'Gantt Chart', icon: Calendar },
              { id: 'kanban', label: 'Kanban Board', icon: Target },
              { id: 'timeline', label: 'Timeline', icon: Clock },
            ].map(view => (
              <button
                key={view.id}
                onClick={() => setActiveView(view.id as any)}
                className={`flex items-center space-x-2 py-3 px-1 border-b-2 font-medium text-sm transition-colors ${
                  activeView === view.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <view.icon className="h-4 w-4" />
                <span>{view.label}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Dashboard View */}
      {activeView === 'dashboard' && (
        <div className="p-6 space-y-6">
          {/* Live Project Status - Real-time monitoring */}
          <LiveProjectStatus />

          {/* Critical Status Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {/* Overall Health */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Project Health</p>
                  <p className={`text-3xl font-bold ${criticalPathBlocked ? 'text-yellow-600' : 'text-green-600'}`}>
                    {criticalPathBlocked ? 'AT RISK' : 'ON TRACK'}
                  </p>
                </div>
                {criticalPathBlocked ? (
                  <AlertTriangle className="h-12 w-12 text-yellow-500" />
                ) : (
                  <CheckCircle className="h-12 w-12 text-green-500" />
                )}
              </div>
              <div className="mt-4">
                <div className={`flex items-center text-sm ${criticalPathBlocked ? 'text-red-500' : 'text-green-500'}`}>
                  {criticalPathBlocked ? (
                    <>
                      <TrendingDown className="h-4 w-4 mr-1" />
                      Critical path blocked
                    </>
                  ) : (
                    <>
                      <TrendingUp className="h-4 w-4 mr-1" />
                      All systems go
                    </>
                  )}
                </div>
              </div>
            </div>

            {/* Progress */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Completion</p>
                  <p className="text-3xl font-bold text-blue-600">{overallProgress}%</p>
                </div>
                <Target className="h-12 w-12 text-blue-500" />
              </div>
              <div className="mt-4">
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${overallProgress}%` }}
                  ></div>
                </div>
                <p className="text-sm text-gray-600 mt-1">{completedTasks}/{totalTasks} tasks complete</p>
              </div>
            </div>

            {/* Critical Path */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Critical Path</p>
                  <p className={`text-3xl font-bold ${criticalPathBlocked ? 'text-red-600' : 'text-green-600'}`}>
                    {criticalPathBlocked ? 'BLOCKED' : 'ON TRACK'}
                  </p>
                </div>
                {criticalPathBlocked ? (
                  <XCircle className="h-12 w-12 text-red-500" />
                ) : (
                  <CheckCircle className="h-12 w-12 text-green-500" />
                )}
              </div>
              <div className="mt-4">
                <p className={`text-sm ${criticalPathBlocked ? 'text-red-600' : 'text-green-600'}`}>
                  {criticalPathBlocked ? `${blockedTasks} tasks blocked` : 'All critical tasks progressing'}
                </p>
              </div>
            </div>

            {/* This Week */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">This Week</p>
                  <p className="text-3xl font-bold text-blue-600">{todaysTasks.length}</p>
                </div>
                <Calendar className="h-12 w-12 text-blue-500" />
              </div>
              <div className="mt-4">
                <p className="text-sm text-gray-600">tasks in progress</p>
              </div>
            </div>
          </div>

          {/* Action Required Section */}
          {riskIndicators.length > 0 && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-6">
              <div className="flex items-center space-x-3 mb-4">
                <AlertTriangle className="h-6 w-6 text-red-600" />
                <h2 className="text-lg font-semibold text-red-900">ACTION REQUIRED</h2>
              </div>
              <div className="space-y-3">
                {riskIndicators.map((risk, index) => (
                  <div key={index} className="flex items-center justify-between bg-white rounded p-3 border border-red-200">
                    <div className="flex items-center space-x-3">
                      <div className={`w-3 h-3 rounded-full ${
                        risk.type === 'critical' ? 'bg-red-500' : 
                        risk.type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
                      }`}></div>
                      <span className="text-gray-900">{risk.message}</span>
                    </div>
                    <span className={`px-2 py-1 rounded text-xs font-medium ${
                      risk.impact === 'high' ? 'bg-red-100 text-red-800' :
                      risk.impact === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {risk.impact.toUpperCase()} IMPACT
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Today's Priorities */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200">
              <div className="p-6 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-gray-900">Today's Priorities</h2>
                  <Clock className="h-5 w-5 text-gray-400" />
                </div>
              </div>
              <div className="p-6 space-y-4">
                {todaysTasks.map((task) => (
                  <div key={task.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className={`w-3 h-3 rounded-full ${
                        task.priority === 'critical' ? 'bg-red-500' : 'bg-orange-500'
                      }`}></div>
                      <span className="text-gray-900">{task.task}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-500">{task.estimatedTime}</span>
                      {task.status === 'pending' ? (
                        <PlayCircle 
                          className="h-4 w-4 text-green-500 cursor-pointer" 
                          onClick={() => updateTaskStatus(task.id, 'in-progress')}
                        />
                      ) : (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Milestone Progress */}
            <div className="bg-white rounded-lg shadow-sm border border-gray-200">
              <div className="p-6 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-gray-900">Milestone Progress</h2>
                  <Target className="h-5 w-5 text-gray-400" />
                </div>
              </div>
              <div className="p-6 space-y-4">
                {milestones.map((milestone) => (
                  <div key={milestone.id} className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium text-gray-900">{milestone.name}</span>
                      <span className="text-sm text-gray-500">{milestone.date}</span>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className="flex-1 bg-gray-200 rounded-full h-2">
                        <div 
                          className={`h-2 rounded-full transition-all duration-300 ${
                            milestone.status === 'completed' ? 'bg-green-500' :
                            milestone.status === 'on-track' ? 'bg-blue-500' :
                            milestone.status === 'at-risk' ? 'bg-yellow-500' : 'bg-gray-400'
                          }`}
                          style={{ width: `${milestone.progress}%` }}
                        ></div>
                      </div>
                      <span className="text-sm text-gray-500 w-12">{milestone.progress}%</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Critical Path Tasks */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Critical Path Tasks</h2>
              <p className="text-sm text-gray-600 mt-1">Tasks that directly impact POC completion date</p>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Task</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Due Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Blockers</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {criticalPathTasks.map((task) => (
                    <tr key={task.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="w-2 h-2 bg-red-500 rounded-full mr-3"></div>
                          <div>
                            <div className="flex items-center space-x-2">
                              <span className="text-sm font-medium text-gray-900">{task.name}</span>
                              {(task as any).autoGenerated && (
                                <span className="px-2 py-0.5 text-xs bg-purple-100 text-purple-700 rounded-full">
                                  AUTO
                                </span>
                              )}
                            </div>
                            <div className="text-sm text-gray-500">{task.category}</div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(task.status)}`}>
                          {task.status.replace('-', ' ').toUpperCase()}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                            <div 
                              className="bg-blue-600 h-2 rounded-full"
                              style={{ width: `${task.progress}%` }}
                            ></div>
                          </div>
                          <span className="text-sm text-gray-900">{task.progress}%</span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {task.endDate}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {task.blockers.length > 0 ? (
                          <div className="text-sm text-red-600">
                            {task.blockers[0]}
                            {task.blockers.length > 1 && ` +${task.blockers.length - 1} more`}
                          </div>
                        ) : (
                          <span className="text-sm text-gray-400">None</span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex space-x-2">
                          <button 
                            onClick={() => handleEditTask(task)}
                            className="text-blue-600 hover:text-blue-900 text-sm font-medium"
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                          {task.status === 'not-started' && (
                            <button 
                              onClick={() => updateTaskStatus(task.id, 'in-progress')}
                              className="text-green-600 hover:text-green-900 text-sm font-medium"
                            >
                              Start
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Progress Tracker */}
          <ProgressTracker 
            onTaskUpdate={(taskId, updates) => {
              updateTask(taskId, updates);
            }}
            onGenerateReport={() => {
              handleExportData();
            }}
          />
        </div>
      )}

      {/* POC Assessment View */}
      {activeView === 'assessment' && (
        <div className="p-6 space-y-6">
          {/* Status Overview */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-2xl font-bold text-gray-900">POC Status Assessment</h2>
                <p className="text-gray-600 mt-1">Comprehensive evaluation updated {pocAssessment.lastUpdated}</p>
              </div>
              <div className={`px-4 py-2 rounded-lg ${
                pocAssessment.currentStatus === 'RECOVERY_MODE' ? 'bg-yellow-100 text-yellow-800' :
                pocAssessment.currentStatus === 'ON_TRACK' ? 'bg-green-100 text-green-800' :
                'bg-red-100 text-red-800'
              }`}>
                <span className="font-semibold">{pocAssessment.currentStatus.replace('_', ' ')}</span>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-blue-600">{pocAssessment.overallCompletion}%</div>
                <div className="text-sm text-gray-600">Overall Completion</div>
                <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                  <div 
                    className="bg-blue-600 h-2 rounded-full"
                    style={{ width: `${pocAssessment.overallCompletion}%` }}
                  ></div>
                </div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-green-600">{pocAssessment.successProbability}%</div>
                <div className="text-sm text-gray-600">Success Probability</div>
                <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                  <div 
                    className="bg-green-600 h-2 rounded-full"
                    style={{ width: `${pocAssessment.successProbability}%` }}
                  ></div>
                </div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-orange-600">{pocAssessment.criticalIssues.filter(i => i.status !== 'RESOLVED').length}</div>
                <div className="text-sm text-gray-600">Active Issues</div>
                <div className="text-xs text-gray-500 mt-1">
                  {pocAssessment.criticalIssues.filter(i => i.status === 'RESOLVED').length} resolved
                </div>
              </div>
            </div>
          </div>

          {/* Critical Issues */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <Bug className="h-5 w-5 mr-2 text-red-500" />
                Critical Issues Status
              </h3>
            </div>
            <div className="p-6 space-y-4">
              {pocAssessment.criticalIssues.map((issue) => (
                <div key={issue.id} className={`border rounded-lg p-4 ${
                  issue.status === 'RESOLVED' ? 'border-green-200 bg-green-50' :
                  issue.status === 'IN_PROGRESS' ? 'border-yellow-200 bg-yellow-50' :
                  'border-red-200 bg-red-50'
                }`}>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3">
                        <h4 className="font-medium text-gray-900">{issue.title}</h4>
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          issue.status === 'RESOLVED' ? 'bg-green-100 text-green-800' :
                          issue.status === 'IN_PROGRESS' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          {issue.status.replace('_', ' ')}
                        </span>
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          issue.impact === 'CRITICAL' ? 'bg-red-100 text-red-800' :
                          'bg-orange-100 text-orange-800'
                        }`}>
                          {issue.impact} IMPACT
                        </span>
                      </div>
                      <p className="text-gray-600 mt-1">{issue.description}</p>
                      
                      {issue.status === 'RESOLVED' && issue.resolution && (
                        <div className="mt-2 p-3 bg-green-100 rounded">
                          <p className="text-green-800 text-sm">
                            <strong>Resolution:</strong> {issue.resolution}
                          </p>
                          {issue.completedDate && (
                            <p className="text-green-600 text-xs mt-1">Completed: {issue.completedDate}</p>
                          )}
                        </div>
                      )}

                      {issue.status === 'IN_PROGRESS' && issue.progress && (
                        <div className="mt-2">
                          <div className="flex items-center justify-between text-sm">
                            <span>Progress: {issue.progress}%</span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2 mt-1">
                            <div 
                              className="bg-yellow-500 h-2 rounded-full"
                              style={{ width: `${issue.progress}%` }}
                            ></div>
                          </div>
                          {issue.completedMethods && (
                            <div className="mt-2 text-sm">
                              <p className="text-green-600">✅ Completed: {issue.completedMethods.join(', ')}</p>
                              <p className="text-yellow-600">🔄 Pending: {issue.pendingMethods?.join(', ')}</p>
                            </div>
                          )}
                        </div>
                      )}

                      {issue.status === 'PENDING' && (
                        <div className="mt-2">
                          {issue.blockers && (
                            <div className="p-3 bg-red-100 rounded">
                              <p className="text-red-800 text-sm">
                                <strong>Blockers:</strong> {issue.blockers.join(', ')}
                              </p>
                            </div>
                          )}
                          {issue.estimatedResolution && (
                            <p className="text-gray-600 text-sm mt-1">
                              Estimated resolution: {issue.estimatedResolution}
                            </p>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Tasks by Priority */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <Timer className="h-5 w-5 mr-2 text-blue-500" />
                Tasks by Completion Priority
              </h3>
              <p className="text-gray-600 text-sm mt-1">Ordered by execution sequence for maximum POC success</p>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Priority</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Task</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Effort</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Target Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Risk</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {pocAssessment.tasksByPriority.map((task, index) => (
                    <tr key={task.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="text-lg font-bold text-gray-600 mr-3">#{index + 1}</div>
                          <span className={`px-2 py-1 rounded text-xs font-medium ${
                            task.priority === 'CRITICAL' ? 'bg-red-100 text-red-800' :
                            task.priority === 'HIGH' ? 'bg-orange-100 text-orange-800' :
                            'bg-yellow-100 text-yellow-800'
                          }`}>
                            {task.priority}
                          </span>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div>
                          <div className="font-medium text-gray-900">{task.title}</div>
                          <div className="text-sm text-gray-600">{task.category}</div>
                          {task.dependencies.length > 0 && (
                            <div className="text-xs text-gray-500 mt-1">
                              Depends on: {task.dependencies.join(', ')}
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="space-y-1">
                          <span className={`px-2 py-1 rounded text-xs font-medium ${
                            task.status === 'PENDING' ? 'bg-gray-100 text-gray-800' :
                            task.status === 'IN_PROGRESS' ? 'bg-blue-100 text-blue-800' :
                            'bg-green-100 text-green-800'
                          }`}>
                            {task.status.replace('_', ' ')}
                          </span>
                          {task.progress && (
                            <div className="text-xs text-gray-600">{task.progress}% complete</div>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {task.estimatedEffort}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {task.targetCompletion}
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-red-600 max-w-xs">
                          {task.risksIfDelayed}
                        </div>
                        <div className="text-xs text-gray-600 mt-1">
                          Assigned: {task.assignedTo}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Weekly Progress Plan */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <Calendar className="h-5 w-5 mr-2 text-purple-500" />
                8-Week Recovery & Implementation Plan
              </h3>
            </div>
            <div className="p-6 space-y-6">
              {pocAssessment.weeklyProgress.map((week, index) => (
                <div key={index} className={`border rounded-lg p-4 ${
                  week.status === 'IN_PROGRESS' ? 'border-blue-200 bg-blue-50' :
                  week.status === 'COMPLETED' ? 'border-green-200 bg-green-50' :
                  'border-gray-200 bg-gray-50'
                }`}>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3">
                        <h4 className="font-medium text-gray-900">{week.week}</h4>
                        <span className="font-semibold text-purple-600">{week.theme}</span>
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          week.riskLevel === 'HIGH' ? 'bg-red-100 text-red-800' :
                          week.riskLevel === 'MEDIUM' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-green-100 text-green-800'
                        }`}>
                          {week.riskLevel} RISK
                        </span>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                        <div>
                          <h5 className="font-medium text-gray-800 mb-2">Key Objectives:</h5>
                          <ul className="text-sm text-gray-600 space-y-1">
                            {week.keyObjectives.map((obj, i) => (
                              <li key={i} className="flex items-start">
                                <Target className="h-3 w-3 mt-1 mr-2 text-blue-500 flex-shrink-0" />
                                {obj}
                              </li>
                            ))}
                          </ul>
                        </div>
                        <div>
                          <h5 className="font-medium text-gray-800 mb-2">Deliverables:</h5>
                          <ul className="text-sm text-gray-600 space-y-1">
                            {week.deliverables.map((deliverable, i) => (
                              <li key={i} className="flex items-start">
                                <CheckCircle className="h-3 w-3 mt-1 mr-2 text-green-500 flex-shrink-0" />
                                {deliverable}
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                      
                      <div className="mt-3 p-3 bg-white rounded border">
                        <p className="text-sm">
                          <strong>Success Criteria:</strong> {week.successCriteria}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Key Improvements Made */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <TrendingUp className="h-5 w-5 mr-2 text-green-500" />
                Key Improvements Since Last Assessment
              </h3>
            </div>
            <div className="p-6 space-y-4">
              {pocAssessment.keyImprovements.map((improvement, index) => (
                <div key={index} className="border border-green-200 rounded-lg p-4 bg-green-50">
                  <h4 className="font-medium text-gray-900 mb-2">{improvement.component}</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm text-gray-600 mb-1"><strong>Before:</strong></p>
                      <p className="text-sm text-red-700">{improvement.before}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600 mb-1"><strong>After:</strong></p>
                      <p className="text-sm text-green-700">{improvement.after}</p>
                    </div>
                  </div>
                  <div className="mt-2 p-2 bg-green-100 rounded">
                    <p className="text-sm text-green-800">
                      <strong>Impact:</strong> {improvement.impact}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Risk Assessment */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200">
              <div className="p-6 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                  <Server className="h-5 w-5 mr-2 text-red-500" />
                  Technical Risks
                </h3>
              </div>
              <div className="p-6 space-y-4">
                {pocAssessment.riskAssessment.technicalRisks.map((risk, index) => (
                  <div key={index} className="border border-red-200 rounded p-3 bg-red-50">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium">{risk.probability}% probability</span>
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        risk.impact === 'HIGH' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {risk.impact}
                      </span>
                    </div>
                    <p className="text-sm text-gray-700 mb-2">{risk.risk}</p>
                    <p className="text-xs text-gray-600">
                      <strong>Mitigation:</strong> {risk.mitigation}
                    </p>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200">
              <div className="p-6 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                  <Users className="h-5 w-5 mr-2 text-yellow-500" />
                  User Risks
                </h3>
              </div>
              <div className="p-6 space-y-4">
                {pocAssessment.riskAssessment.userRisks.map((risk, index) => (
                  <div key={index} className="border border-yellow-200 rounded p-3 bg-yellow-50">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium">{risk.probability}% probability</span>
                      <span className="px-2 py-1 rounded text-xs font-medium bg-yellow-100 text-yellow-800">
                        {risk.impact}
                      </span>
                    </div>
                    <p className="text-sm text-gray-700 mb-2">{risk.risk}</p>
                    <p className="text-xs text-gray-600">
                      <strong>Mitigation:</strong> {risk.mitigation}
                    </p>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-sm border border-gray-200">
              <div className="p-6 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                  <Globe className="h-5 w-5 mr-2 text-blue-500" />
                  Business Risks
                </h3>
              </div>
              <div className="p-6 space-y-4">
                {pocAssessment.riskAssessment.businessRisks.map((risk, index) => (
                  <div key={index} className="border border-blue-200 rounded p-3 bg-blue-50">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium">{risk.probability}% probability</span>
                      <span className="px-2 py-1 rounded text-xs font-medium bg-blue-100 text-blue-800">
                        {risk.impact}
                      </span>
                    </div>
                    <p className="text-sm text-gray-700 mb-2">{risk.risk}</p>
                    <p className="text-xs text-gray-600">
                      <strong>Mitigation:</strong> {risk.mitigation}
                    </p>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Success Metrics */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                <TestTube className="h-5 w-5 mr-2 text-purple-500" />
                Success Metrics Tracking
              </h3>
            </div>
            <div className="p-6">
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div>
                  <h4 className="font-medium text-gray-900 mb-4">Technical Metrics</h4>
                  <div className="space-y-3">
                    {pocAssessment.successMetrics.technical.map((metric, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{metric.metric}</div>
                          <div className="text-xs text-gray-600">Target: {metric.target}</div>
                        </div>
                        <div className="text-sm text-gray-700">{metric.current}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-gray-900 mb-4">User Metrics</h4>
                  <div className="space-y-3">
                    {pocAssessment.successMetrics.user.map((metric, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{metric.metric}</div>
                          <div className="text-xs text-gray-600">Target: {metric.target}</div>
                        </div>
                        <div className="text-sm text-gray-700">{metric.current}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-gray-900 mb-4">Business Metrics</h4>
                  <div className="space-y-3">
                    {pocAssessment.successMetrics.business.map((metric, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{metric.metric}</div>
                          <div className="text-xs text-gray-600">Target: {metric.target}</div>
                        </div>
                        <div className="text-sm text-gray-700">{metric.current}</div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Gantt Chart View */}
      {activeView === 'gantt' && (
        <div className="p-6">
          <GanttChart
            tasks={tasks}
            onTaskUpdate={updateTask}
            onTaskClick={handleEditTask}
          />
        </div>
      )}

      {/* Kanban Board View */}
      {activeView === 'kanban' && (
        <div className="p-6">
          <KanbanBoard
            tasks={tasks}
            onTaskUpdate={updateTask}
            onTaskClick={handleEditTask}
            onAddTask={handleAddTask}
          />
        </div>
      )}

      {/* Timeline View */}
      {activeView === 'timeline' && (
        <div className="p-6 space-y-6">
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">Project Timeline</h3>
            <div className="relative">
              {/* Timeline Line */}
              <div className="absolute left-8 top-0 bottom-0 w-0.5 bg-gray-300"></div>
              
              {/* Timeline Events */}
              <div className="space-y-8">
                {milestones.map((milestone, index) => (
                  <div key={milestone.id} className="relative flex items-center">
                    {/* Timeline Dot */}
                    <div className={`
                      absolute left-6 w-4 h-4 rounded-full border-2 bg-white z-10
                      ${milestone.status === 'completed' ? 'border-green-500' :
                        milestone.status === 'on-track' ? 'border-blue-500' :
                        milestone.status === 'at-risk' ? 'border-yellow-500' : 'border-gray-300'}
                    `}>
                      {milestone.status === 'completed' && (
                        <CheckCircle className="h-3 w-3 text-green-500 absolute -top-0.5 -left-0.5" />
                      )}
                    </div>
                    
                    {/* Milestone Content */}
                    <div className="ml-16 flex-1 bg-gray-50 rounded-lg p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-gray-900">{milestone.name}</h4>
                          <p className="text-sm text-gray-600 mt-1">
                            Target: {new Date(milestone.date).toLocaleDateString()}
                          </p>
                        </div>
                        <div className="text-right">
                          <div className={`
                            inline-flex px-2 py-1 rounded-full text-xs font-medium
                            ${milestone.status === 'completed' ? 'bg-green-100 text-green-800' :
                              milestone.status === 'on-track' ? 'bg-blue-100 text-blue-800' :
                              milestone.status === 'at-risk' ? 'bg-yellow-100 text-yellow-800' : 
                              'bg-gray-100 text-gray-800'}
                          `}>
                            {milestone.status.replace('-', ' ').toUpperCase()}
                          </div>
                          <div className="text-sm text-gray-600 mt-1">{milestone.progress}% Complete</div>
                        </div>
                      </div>
                      
                      {/* Progress Bar */}
                      <div className="mt-3">
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div 
                            className={`
                              h-2 rounded-full transition-all duration-300
                              ${milestone.status === 'completed' ? 'bg-green-500' :
                                milestone.status === 'on-track' ? 'bg-blue-500' :
                                milestone.status === 'at-risk' ? 'bg-yellow-500' : 'bg-gray-400'}
                            `}
                            style={{ width: `${milestone.progress}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Task Edit Modal */}
      <TaskEditModal
        isOpen={isTaskModalOpen}
        onClose={() => {
          setIsTaskModalOpen(false);
          setEditingTask(null);
        }}
        task={editingTask}
        onSave={handleSaveTask}
        allTasks={tasks}
      />
    </div>
  );
};

export default POCManagementPage;