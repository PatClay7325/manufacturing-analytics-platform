# Manufacturing Analytics Platform - Docker Compose with Ollama
# This configuration includes Ollama for local AI processing

version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: manufacturing-postgres
    environment:
      POSTGRES_DB: manufacturing
      POSTGRES_USER: analytics
      POSTGRES_PASSWORD: development_password
      TIMESCALEDB_TELEMETRY: 'off'
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics -d manufacturing"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - manufacturing-network

  redis:
    image: redis:7-alpine
    container_name: manufacturing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - manufacturing-network

  ollama:
    image: ollama/ollama:latest
    container_name: manufacturing-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - manufacturing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Ollama model initialization service
  ollama-init:
    image: ollama/ollama:latest
    container_name: manufacturing-ollama-init
    depends_on:
      - ollama
    volumes:
      - ollama_data:/root/.ollama
      - ./scripts/ollama-init.sh:/init.sh
    environment:
      - OLLAMA_HOST=ollama:11434
    networks:
      - manufacturing-network
    entrypoint: ["/bin/bash", "/init.sh"]
    restart: "no"

  prometheus:
    image: prom/prometheus:latest
    container_name: manufacturing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - manufacturing-network

  # Manufacturing Analytics Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: manufacturing-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://analytics:development_password@postgres:5432/manufacturing
      - REDIS_URL=redis://redis:6379
      - OLLAMA_API_URL=http://ollama:11434
      - OLLAMA_MODEL=codellama:13b-instruct
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - postgres
      - redis
      - ollama
    networks:
      - manufacturing-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  ollama_data:

networks:
  manufacturing-network:
    driver: bridge