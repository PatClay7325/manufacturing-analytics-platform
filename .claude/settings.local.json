{
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(mkdir:*)",
      "Bash(ls:*)",
      "Bash(chmod:*)",
      "Bash(touch:*)",
      "Bash(cat:*)",
      "Bash(find:*)",
      "Bash(chmod:*)",
      "Bash(node:*)",
      "Bash(docker inspect:*)",
      "Bash(docker network:*)",
      "Bash(docker-compose:*)",
      "Bash(npm run test:e2e:*)",
      "Bash(npm install:*)",
      "Bash(npx playwright:*)",
      "Bash(npm run test:unit:*)",
      "Bash(NODE_ENV=test npm run test)",
      "Bash(NODE_OPTIONS=--no-warnings npm run test:e2e)",
      "Bash(NODE_OPTIONS=--no-warnings npm run test:unit)",
      "Bash(npm run test:*)",
      "Bash(npx vitest run:*)",
      "Bash(CI=true npx playwright test --grep=\"@smoke\")",
      "Bash(npm run dev:*)",
      "Bash(npm run build:*)",
      "Bash(npx tsc:*)",
      "Bash(npx next build:*)",
      "Bash(rg:*)",
      "Bash(grep:*)",
      "Bash(npm run typecheck:*)",
      "Bash(sed:*)",
      "Bash(npx kill-port:*)",
      "Bash(true)",
      "Bash(curl:*)",
      "Bash(npx msw init:*)",
      "Bash(pkill:*)",
      "Bash(./run-audit.sh:*)",
      "Bash(for file in audit-tests/*.audit.ts)",
      "Bash(do mv \"$file\" \"$file%.audit.ts.spec.ts\")",
      "Bash(done)",
      "Bash(sudo apt-get:*)",
      "Bash(sudo apt-get install:*)",
      "Bash(npx prisma generate:*)",
      "Bash(npx prisma migrate reset:*)",
      "Bash(npx prisma:*)",
      "Bash(npx tsx:*)",
      "Bash(for file in GaugeChart.tsx HeatmapChart.tsx ParetoChart.tsx GanttChart.tsx RealtimeChart.tsx HighchartsDashboard.tsx)",
      "Bash(do sed -i \"s/import Highcharts from ''@\\/config\\/highcharts''/import type * as Highcharts from ''highcharts''/g\" \"$file\")",
      "Bash(docker:*)",
      "Bash(kill:*)",
      "Bash(kill:*)",
      "Bash(npm uninstall:*)",
      "Bash(/mnt/d/Source/manufacturing-analytics-platform/src/app/charts-comparison)",
      "Bash(npm prune:*)",
      "Bash(sudo npx playwright:*)",
      "Bash(createdb:*)",
      "Bash(tsx scripts/test-system-comprehensive.ts:*)",
      "Bash(ollama list:*)",
      "Bash(psql:*)",
      "Bash(npm test:*)",
      "Bash(ss:*)",
      "Bash(tar:*)",
      "Bash(npm --version)",
      "Bash(./node_modules/.bin/tsc --noEmit --skipLibCheck)",
      "Bash(npm run analyze:errors:*)",
      "Bash(npm run fix:errors:dry:*)",
      "Bash(npm run fix:errors:*)",
      "Bash(timeout 10 npm run dev)",
      "Bash(timeout 15 npm run dev)",
      "Bash(npx next lint:*)",
      "Bash(npm start)",
      "Bash(npx next dev:*)",
      "Bash(npx ts-node:*)",
      "Bash(/mnt/d/Source/manufacturing-analytics-platform/scripts/batch-fix-event-handlers.sh:*)",
      "Bash(timeout 60s npm run build)",
      "Bash(timeout 120 npm run build)",
      "Bash(echo:*)",
      "Bash(git checkout:*)",
      "Bash(timeout 60 npm run build)",
      "Bash(timeout 30 npm run build:*)",
      "Bash(tsx scripts/test-prisma-integration.ts:*)",
      "Bash(./test-pages-curl.sh:*)",
      "Bash(ss:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres:postgres@localhost:5432/manufacturing_test?schema=public\" npx prisma db push --skip-generate)",
      "Bash(DATABASE_URL=\"postgresql://postgres:postgres@localhost:5432/manufacturing_test?schema=public\" npx prisma db push --accept-data-loss)",
      "Bash(./test-summary.sh:*)",
      "Bash(bash:*)",
      "Bash(pgrep:*)",
      "Bash(timeout 30s npm run dev)",
      "Bash(awk:*)",
      "Bash(npm config:*)",
      "Bash(npm cache clean:*)",
      "Bash(1)",
      "Bash(npm run task1:validate:*)",
      "Bash(timeout 15s npx vitest run --reporter=basic src/components/ui/__tests__/button.test.tsx)",
      "Bash(pnpm:*)",
      "Bash(SHELL=/bin/bash bash -c \"cd /mnt/c/Users/pclay/bolt.diy && pnpm install\")",
      "Bash(SHELL=/bin/bash bash -c \"cd /mnt/c/Users/pclay/bolt.diy && echo 'Y' | pnpm install\")",
      "Bash(SHELL=/bin/bash bash -c \"cd /mnt/c/Users/pclay/bolt.diy && ls -la node_modules | head -5\")",
      "Bash(SHELL=/bin/bash bash -c \"cd /mnt/c/Users/pclay/bolt.diy && ls -la node_modules/.pnpm | head -5\")",
      "Bash(npx create-next-app:*)",
      "Bash(./node_modules/.bin/next dev)",
      "Bash(where next.cmd)",
      "Bash(npm run:*)",
      "WebFetch(domain:github.com)",
      "Bash(timeout 30 npm run dev:*)",
      "Bash(npm ls:*)",
      "Bash(timeout 30 npx tsc --noEmit --skipLibCheck --incremental false)",
      "Bash(timeout:*)",
      "Bash(NODE_OPTIONS=\"--max-old-space-size=4096\" timeout 45s npx next lint --dir src/components/templates --quiet)",
      "Bash(npm i:*)",
      "Bash(claude-code --version)",
      "Bash(claude --version)",
      "Bash(claude)",
      "Bash(NODE_OPTIONS=\"--max-old-space-size=4096\" npm run build)",
      "Bash(NODE_ENV=test npm run test -- --run src/__tests__/lib/auth/AuthService.test.ts 2 >& 1)",
      "Bash(NODE_ENV=test npm run test -- --run --reporter=verbose)",
      "Bash(NODE_ENV=test npm run test -- --run src/__tests__/lib/validation/DataValidator.test.ts 2 >& 1)",
      "Bash(openssl rand:*)",
      "Bash(NODE_ENV=test npm run test -- --run src/__tests__/lib/auth/middleware.test.ts 2 >& 1)",
      "Bash(NODE_ENV=test npm run test -- --run --reporter=default 2 >& 1)",
      "Bash(NODE_ENV=test npm run test -- --run --reporter=json 2 >& 1)",
      "Bash(NODE_ENV=test npm run test:single -- src/__tests__/simple.test.ts)",
      "Bash(NODE_ENV=test NODE_OPTIONS=\"--max-old-space-size=2048\" npm run test:single -- src/__tests__/simple.test.ts)",
      "Bash(NODE_ENV=test npx vitest run src/__tests__/simple.test.ts -c vitest.config.minimal.ts)",
      "Bash(npx eslint:*)",
      "Bash(./test-one-file.sh:*)",
      "Bash(./replace-grafana-references.sh:*)",
      "Bash(tsx:*)",
      "Bash(./deploy-manufacturing-analytics.sh:*)",
      "Bash(PGPASSWORD=password psql:*)",
      "Bash(./setup-grafana.sh:*)",
      "Bash(./create-grafana-dashboard.sh:*)",
      "Bash(./import-community-dashboards.sh:*)",
      "Bash(./import-dashboard-simple.sh:*)",
      "Bash(./install-manufacturing-dashboards.sh:*)",
      "Bash(./create-production-dashboard.sh:*)",
      "Bash(./cleanup-project.sh:*)",
      "Bash(./fix-remaining-issues.sh:*)",
      "Bash(./import-existing-dashboards.sh:*)",
      "Bash(./fix-grafana-datasources.sh:*)",
      "Bash(./configure-grafana-datasources.sh:*)",
      "Bash(./test-grafana-connection.sh:*)",
      "Bash(./configure-prisma-datasource.sh:*)",
      "Bash(./update-dashboards-to-prisma.sh:*)",
      "Bash(apt-get install:*)",
      "Bash(./update-prisma-datasource.sh:*)",
      "Bash(time curl:*)",
      "Bash(ollama:*)",
      "Bash(npm view:*)",
      "Bash(yarn add:*)",
      "Bash(git clone:*)",
      "Bash(git sparse-checkout:*)",
      "Bash(./node_modules/.bin/tsc:*)",
      "WebFetch(domain:grafana.com)",
      "Bash(DATABASE_URL=\"postgresql://postgres:postgres@localhost:5432/manufacturing?schema=public\" npx prisma generate)",
      "Bash(set DATABASE_URL=postgresql://postgres:postgres@localhost:5432/manufacturing?schema=public)",
      "Bash(cmd.exe:*)",
      "Bash(npx vitest:*)",
      "Bash(./scripts/start-ollama-stack.sh:*)",
      "Bash(./scripts/optimize-ollama-performance.sh:*)",
      "Bash(DATABASE_URL=\"postgresql://analytics:development_password@localhost:5433/manufacturing?schema=public\" npx prisma generate)",
      "Bash(./scripts/setup-timescaledb-schema.sh:*)",
      "Bash(DATABASE_URL=\"postgresql://analytics:development_password@localhost:5433/manufacturing\" npm run test:smoke)",
      "Bash(DATABASE_URL=\"postgresql://analytics:development_password@localhost:5433/manufacturing\" npx jest tests/smoke/basic-functionality.test.ts)",
      "Bash(DATABASE_URL=\"postgresql://analytics:development_password@localhost:5433/manufacturing\" npm run test:database)",
      "Bash(npx jest:*)",
      "Bash(PGPASSWORD=development_password psql:*)",
      "Bash(# Move manufacturing-agent to agent\nmv /mnt/d/Source/manufacturing-analytics-platform/src/app/api/chat/manufacturing-agent/route.ts /mnt/d/Source/manufacturing-analytics-platform/src/app/api/chat/agent-route.ts\n\n# Move ultra-fast to cached\nmv /mnt/d/Source/manufacturing-analytics-platform/src/app/api/chat/ultra-fast/route.ts /mnt/d/Source/manufacturing-analytics-platform/src/app/api/chat/cached-route.ts\n\n# Move test to health\nmv /mnt/d/Source/manufacturing-analytics-platform/src/app/api/chat/test/route.ts /mnt/d/Source/manufacturing-analytics-platform/src/app/api/chat/health-route.ts)",
      "Bash(tree:*)",
      "Bash(# Delete chat pages (except ollama-chat)\nrm -rf ./src/app/ai-chat\nrm -rf ./src/app/air-gapped-chat\nrm -rf ./src/app/chat-demo\nrm -rf ./src/app/fast-chat\nrm -rf ./src/app/manufacturing-chat\nrm -rf ./src/app/test-chat\n\n# Delete chat API routes (except main /api/chat/route.ts)\nrm -rf ./src/app/api/chat-backup\nrm -rf ./src/app/api/chat-offline\nrm -rf ./src/app/api/chat-simple\nrm -rf ./src/app/api/chat/agent\nrm -rf ./src/app/api/chat/cached\nrm -rf ./src/app/api/chat/health\nrm -rf ./src/app/api/chat/stream\n\n# Delete chat services\nrm -f ./src/services/chatService.ts\nrm -f ./src/services/api/chatApi.ts\n\n# Delete chat models and mocks\nrm -f ./src/models/chat.ts\nrm -f ./src/mocks/data/chat.ts\n\n# Delete chat integration test\nrm -f ./src/__tests__/integration/chat.integration.test.ts\n\necho \"Deleted obsolete chat files\")",
      "Bash(# Find and delete more chat-related files\nfind . -name \"*manufacturingChatService*\" -type f -delete\nfind . -name \"*streamingChatService*\" -type f -delete\nfind . -name \"*useFastChat*\" -type f -delete\nfind . -name \"*useOptimisticChat*\" -type f -delete\nfind . -name \"*useStreamingChat*\" -type f -delete\n\n# Delete chat test files\nrm -f ./tests/e2e/ai-chat.spec.ts\nrm -f ./tests/e2e/ai-chat-simple.spec.ts\nrm -f ./tests/e2e/ai-chat-verification.spec.ts\nrm -f ./tests/e2e/manufacturing-chat.spec.ts\nrm -f ./tests/e2e/pages/manufacturing-chat-comprehensive.spec.ts\nrm -f ./testing/e2e/ai-chat.spec.ts\n\n# Delete chat scripts\nrm -f ./scripts/test-chat-api.ts\nrm -f ./scripts/test-chat-ollama-simple.ts\nrm -f ./scripts/test-iso-chat.ts\nrm -f ./scripts/test-fixed-chat.ts\nrm -f ./scripts/test-gemma-chat.ts\nrm -f ./scripts/test-chat-performance.ts\nrm -f ./scripts/test-chat-endpoint.cmd\nrm -f ./scripts/windows/test-ai-chat-only.cmd\nrm -f ./scripts/windows/fix-chat-ai.cmd\nrm -f ./scripts/windows/test-chat-ai.cmd\nrm -f ./scripts/windows/setup-chat-env.cmd\nrm -f ./scripts/windows/test-enhanced-chat.cmd\nrm -f ./scripts/windows/test-chat-final.cmd\nrm -f ./scripts/windows/TEST-GEMMA-CHAT.cmd\n\necho \"Deleted more chat-related files\")",
      "Bash(# Delete chat components directory\nrm -rf ./src/components/chat\n\n# Delete remaining chat files\nrm -f ./src/services/manufacturingChatService.ts\nrm -f ./src/services/streamingChatService.ts\nrm -f ./src/hooks/useFastChat.ts\nrm -f ./src/hooks/useOptimisticChat.ts\nrm -f ./src/hooks/useStreamingChat.ts\n\necho \"Deleted chat components and services\")",
      "Bash(# Check what chat-related files remain\necho \"=== Remaining chat files in src/app ===\"\nfind ./src/app -name \"*chat*\" -type f 2>/dev/null | grep -v backup || echo \"None found\"\n\necho -e \"\\n=== Remaining API chat routes ===\"\nfind ./src/app/api -name \"*chat*\" -type f 2>/dev/null | grep -v backup || echo \"None found\"\n\necho -e \"\\n=== Ollama chat page status ===\"\nls -la ./src/app/ollama-chat/page.tsx 2>/dev/null || echo \"Ollama chat page not found!\")",
      "Bash(# Check the main chat API route\nls -la ./src/app/api/chat/route.ts 2>/dev/null || echo \"Main chat API route not found!\"\n\n# Check if ChatInterface component exists\nls -la ./src/components/ai/ChatInterface.tsx 2>/dev/null || echo \"ChatInterface component not found!\")",
      "Bash(# Search for any remaining references to deleted chat endpoints\ngrep -r \"chat/stream\\|chat/agent\\|chat/cached\\|chat/health\\|chat-backup\\|chat-offline\\|chat-simple\" ./src --include=\"*.ts\" --include=\"*.tsx\" | grep -v backup | head -20)",
      "Bash(# Delete chat-related documentation\nrm -f ./AI-CHAT-ACCESS-GUIDE.md\nrm -f \"./Chat Code.md\"\nrm -f ./docs/CHAT-FEATURE-GUIDE.md\nrm -f ./docs/architecture/CHAT-IMPLEMENTATION-SUMMARY.md\nrm -f ./CHAT-PERFORMANCE-ANALYSIS.md\nrm -f ./CHAT-OPTIMIZATION-GUIDE.md\nrm -f ./TEST-CHAT-PERFORMANCE-REPORT.md\nrm -f ./CHATGPT-4O-IMPLEMENTATION-PLAN.md\nrm -f ./AIR-GAPPED-CHAT-IMPLEMENTATION.md\nrm -f ./CHAT-ARCHITECTURE-VERIFIED.md\n\n# Delete other chat-related files\nrm -f ./chat_response.json\nrm -f ./test-air-gapped-chat.js\nrm -f ./test-chat-flow.js\nrm -f ./verify-chat-architecture.js\nrm -f ./test-chat-direct.js\nrm -f ./seed-sample-chat-data.cmd\nrm -f ./start-ollama-for-chat.cmd\nrm -f ./START-FAST-CHAT.cmd\nrm -f ./TEST-CHAT-FULL.cmd\nrm -f ./TEST-CHAT-PERFORMANCE.cmd\nrm -f ./FIX-CHAT-PERFORMANCE.cmd\n\necho \"Deleted chat-related documentation and scripts\")",
      "Bash(# Run TypeScript check to ensure no broken imports\ncd /mnt/d/Source/manufacturing-analytics-platform\nnpm run type-check 2>&1 | grep -E \"error|Cannot find module|import\" | head -20)",
      "Bash(cd:*)",
      "Bash(# Search for imports of deleted files\ngrep -r \"from.*manufacturing-chat\\|from.*ai-chat\\|from.*chatService\\|from.*manufacturingChatService\\|from.*streamingChatService\" ./src --include=\"*.ts\" --include=\"*.tsx\" | grep -v backup)",
      "Bash(# Check for any remaining references to deleted chat services or models\ngrep -r \"manufacturingChatService\\|streamingChatService\\|chatService\\|/chat/stream\\|/chat/agent\\|/models/chat\" ./src --include=\"*.ts\" --include=\"*.tsx\" | grep -v backup | grep -v \"//.*chat\" | head -10)",
      "Bash(# Check for remaining test files with chat references\ngrep -r \"ai-chat\\|manufacturing-chat\" ./src/__tests__ ./tests --include=\"*.ts\" --include=\"*.tsx\" | grep -v backup)",
      "Bash(# Create a summary of the chat cleanup\ncat > /mnt/d/Source/manufacturing-analytics-platform/CHAT-CLEANUP-SUMMARY.md << 'EOF'\n# Chat Interface Cleanup Summary\n\n## Date: 2025-06-24\n\n## Objective\nEnsure that the primary and only chat interface is http://localhost:3000/ollama-chat. All other chat interfaces and related files have been marked as obsolete and deleted.\n\n## Files Deleted\n\n### Chat Pages (6 total)\n- `/src/app/ai-chat/` - Deleted\n- `/src/app/air-gapped-chat/` - Deleted\n- `/src/app/chat-demo/` - Deleted\n- `/src/app/fast-chat/` - Deleted\n- `/src/app/manufacturing-chat/` - Deleted (including [id] and optimized subdirectories)\n- `/src/app/test-chat/` - Deleted\n\n### API Routes (7 total)\n- `/src/app/api/chat-backup/` - Entire directory deleted\n- `/src/app/api/chat-offline/` - Entire directory deleted\n- `/src/app/api/chat-simple/` - Entire directory deleted\n- `/src/app/api/chat/agent/` - Deleted\n- `/src/app/api/chat/cached/` - Deleted\n- `/src/app/api/chat/health/` - Deleted\n- `/src/app/api/chat/stream/` - Deleted\n\n### Services (3 total)\n- `/src/services/chatService.ts` - Deleted\n- `/src/services/manufacturingChatService.ts` - Deleted\n- `/src/services/streamingChatService.ts` - Deleted\n- `/src/services/api/chatApi.ts` - Deleted\n\n### Components\n- `/src/components/chat/` - Entire directory deleted\n\n### Models and Mocks\n- `/src/models/chat.ts` - Deleted\n- `/src/mocks/data/chat.ts` - Deleted\n\n### Tests\n- `/src/__tests__/integration/chat.integration.test.ts` - Deleted\n- Multiple e2e test files for chat functionality - Deleted\n\n### Scripts and Documentation\n- Multiple chat-related scripts in `/scripts/` - Deleted\n- Multiple chat-related documentation files - Deleted\n\n## Files Retained\n\n### Primary Chat Implementation (3 files)\n1. `/src/app/ollama-chat/page.tsx` - The ONLY chat interface page\n2. `/src/components/ai/ChatInterface.tsx` - Chat UI component used by ollama-chat\n3. `/src/app/api/chat/route.ts` - Main chat API endpoint\n\n## Navigation Updates\n- Updated all navigation components to point to `/ollama-chat` instead of deleted routes\n- Fixed imports and references in diagnostic routes\n- Added local type definitions where needed to replace deleted models\n\n## Result\n✅ Successfully ensured that http://localhost:3000/ollama-chat is the ONLY chat interface\n✅ All obsolete chat implementations have been removed\n✅ Navigation and references have been updated\n✅ The application now has a single, consolidated chat interface using local Ollama AI\nEOF\n\necho \"Created chat cleanup summary\")",
      "Bash(VERIFY-STREAMING-FIX.cmd)",
      "Bash(./VERIFY-STREAMING-FIX.cmd)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}