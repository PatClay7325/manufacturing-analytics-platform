{
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(mkdir:*)",
      "Bash(ls:*)",
      "Bash(chmod:*)",
      "Bash(touch:*)",
      "Bash(cat:*)",
      "Bash(find:*)",
      "Bash(chmod:*)",
      "Bash(node:*)",
      "Bash(docker inspect:*)",
      "Bash(docker network:*)",
      "Bash(docker-compose:*)",
      "Bash(npm run test:e2e:*)",
      "Bash(npm install:*)",
      "Bash(npx playwright:*)",
      "Bash(npm run test:unit:*)",
      "Bash(NODE_ENV=test npm run test)",
      "Bash(NODE_OPTIONS=--no-warnings npm run test:e2e)",
      "Bash(NODE_OPTIONS=--no-warnings npm run test:unit)",
      "Bash(npm run test:*)",
      "Bash(npx vitest run:*)",
      "Bash(CI=true npx playwright test --grep=\"@smoke\")",
      "Bash(npm run dev:*)",
      "Bash(npm run build:*)",
      "Bash(npx tsc:*)",
      "Bash(npx next build:*)",
      "Bash(rg:*)",
      "Bash(grep:*)",
      "Bash(npm run typecheck:*)",
      "Bash(sed:*)",
      "Bash(npx kill-port:*)",
      "Bash(true)",
      "Bash(curl:*)",
      "Bash(npx msw init:*)",
      "Bash(pkill:*)",
      "Bash(./run-audit.sh:*)",
      "Bash(for file in audit-tests/*.audit.ts)",
      "Bash(do mv \"$file\" \"$file%.audit.ts.spec.ts\")",
      "Bash(done)",
      "Bash(sudo apt-get:*)",
      "Bash(sudo apt-get install:*)",
      "Bash(npx prisma generate:*)",
      "Bash(npx prisma migrate reset:*)",
      "Bash(npx prisma:*)",
      "Bash(npx tsx:*)",
      "Bash(for file in GaugeChart.tsx HeatmapChart.tsx ParetoChart.tsx GanttChart.tsx RealtimeChart.tsx HighchartsDashboard.tsx)",
      "Bash(do sed -i \"s/import Highcharts from ''@\\/config\\/highcharts''/import type * as Highcharts from ''highcharts''/g\" \"$file\")",
      "Bash(docker:*)",
      "Bash(kill:*)",
      "Bash(kill:*)",
      "Bash(npm uninstall:*)",
      "Bash(/mnt/d/Source/manufacturing-analytics-platform/src/app/charts-comparison)",
      "Bash(npm prune:*)",
      "Bash(sudo npx playwright:*)",
      "Bash(createdb:*)",
      "Bash(tsx scripts/test-system-comprehensive.ts:*)",
      "Bash(ollama list:*)",
      "Bash(psql:*)",
      "Bash(npm test:*)",
      "Bash(ss:*)",
      "Bash(tar:*)",
      "Bash(npm --version)",
      "Bash(./node_modules/.bin/tsc --noEmit --skipLibCheck)",
      "Bash(npm run analyze:errors:*)",
      "Bash(npm run fix:errors:dry:*)",
      "Bash(npm run fix:errors:*)",
      "Bash(timeout 10 npm run dev)",
      "Bash(timeout 15 npm run dev)",
      "Bash(npx next lint:*)",
      "Bash(npm start)",
      "Bash(npx next dev:*)",
      "Bash(npx ts-node:*)",
      "Bash(/mnt/d/Source/manufacturing-analytics-platform/scripts/batch-fix-event-handlers.sh:*)",
      "Bash(timeout 60s npm run build)",
      "Bash(timeout 120 npm run build)",
      "Bash(echo:*)",
      "Bash(git checkout:*)",
      "Bash(timeout 60 npm run build)",
      "Bash(timeout 30 npm run build:*)",
      "Bash(tsx scripts/test-prisma-integration.ts:*)",
      "Bash(./test-pages-curl.sh:*)",
      "Bash(ss:*)",
      "Bash(DATABASE_URL=\"postgresql://postgres:postgres@localhost:5432/manufacturing_test?schema=public\" npx prisma db push --skip-generate)",
      "Bash(DATABASE_URL=\"postgresql://postgres:postgres@localhost:5432/manufacturing_test?schema=public\" npx prisma db push --accept-data-loss)",
      "Bash(./test-summary.sh:*)",
      "Bash(bash:*)",
      "Bash(pgrep:*)",
      "Bash(timeout 30s npm run dev)",
      "Bash(awk:*)",
      "Bash(npm config:*)",
      "Bash(npm cache clean:*)",
      "Bash(1)",
      "Bash(npm run task1:validate:*)",
      "Bash(timeout 15s npx vitest run --reporter=basic src/components/ui/__tests__/button.test.tsx)",
      "Bash(pnpm:*)",
      "Bash(SHELL=/bin/bash bash -c \"cd /mnt/c/Users/pclay/bolt.diy && pnpm install\")",
      "Bash(SHELL=/bin/bash bash -c \"cd /mnt/c/Users/pclay/bolt.diy && echo 'Y' | pnpm install\")",
      "Bash(SHELL=/bin/bash bash -c \"cd /mnt/c/Users/pclay/bolt.diy && ls -la node_modules | head -5\")",
      "Bash(SHELL=/bin/bash bash -c \"cd /mnt/c/Users/pclay/bolt.diy && ls -la node_modules/.pnpm | head -5\")",
      "Bash(npx create-next-app:*)",
      "Bash(./node_modules/.bin/next dev)",
      "Bash(where next.cmd)",
      "Bash(npm run:*)",
      "WebFetch(domain:github.com)",
      "Bash(timeout 30 npm run dev:*)",
      "Bash(npm ls:*)",
      "Bash(timeout 30 npx tsc --noEmit --skipLibCheck --incremental false)",
      "Bash(timeout:*)",
      "Bash(NODE_OPTIONS=\"--max-old-space-size=4096\" timeout 45s npx next lint --dir src/components/templates --quiet)",
      "Bash(npm i:*)",
      "Bash(claude-code --version)",
      "Bash(claude --version)",
      "Bash(claude)",
      "Bash(NODE_OPTIONS=\"--max-old-space-size=4096\" npm run build)",
      "Bash(NODE_ENV=test npm run test -- --run src/__tests__/lib/auth/AuthService.test.ts 2 >& 1)",
      "Bash(NODE_ENV=test npm run test -- --run --reporter=verbose)",
      "Bash(NODE_ENV=test npm run test -- --run src/__tests__/lib/validation/DataValidator.test.ts 2 >& 1)",
      "Bash(openssl rand:*)",
      "Bash(NODE_ENV=test npm run test -- --run src/__tests__/lib/auth/middleware.test.ts 2 >& 1)",
      "Bash(NODE_ENV=test npm run test -- --run --reporter=default 2 >& 1)",
      "Bash(NODE_ENV=test npm run test -- --run --reporter=json 2 >& 1)",
      "Bash(NODE_ENV=test npm run test:single -- src/__tests__/simple.test.ts)",
      "Bash(NODE_ENV=test NODE_OPTIONS=\"--max-old-space-size=2048\" npm run test:single -- src/__tests__/simple.test.ts)",
      "Bash(NODE_ENV=test npx vitest run src/__tests__/simple.test.ts -c vitest.config.minimal.ts)",
      "Bash(npx eslint:*)",
      "Bash(./test-one-file.sh:*)",
      "Bash(./replace-grafana-references.sh:*)",
      "Bash(tsx:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}