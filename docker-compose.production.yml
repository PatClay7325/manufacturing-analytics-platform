version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: manufacturing-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - nextjs
    networks:
      - manufacturing-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Manufacturing Analytics Platform (Next.js)
  nextjs:
    build: 
      context: .
      dockerfile: Dockerfile.production
    container_name: manufacturing-nextjs
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/manufacturing
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL:-https://localhost}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-here}
      - JWT_SECRET=${JWT_SECRET:-${NEXTAUTH_SECRET}}
      - MQTT_URL=mqtt://mosquitto:1883
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - manufacturing-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  # Shared PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: manufacturing-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=manufacturing
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./prisma/migrations/timescaledb:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - manufacturing-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c max_wal_size=4GB

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - manufacturing-net
    restart: unless-stopped

  # Redis for caching and real-time
  redis:
    image: redis:7-alpine
    container_name: manufacturing-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
    networks:
      - manufacturing-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - manufacturing-net
    restart: unless-stopped

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/manufacturing?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - manufacturing-net
    restart: unless-stopped

  # MQTT Broker (Mosquitto)
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: manufacturing-mosquitto
    volumes:
      - mosquitto-data:/mosquitto/data
      - mosquitto-logs:/mosquitto/log
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
      - manufacturing-net
    restart: unless-stopped

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: manufacturing-loki
    volumes:
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks:
      - manufacturing-net
    restart: unless-stopped

  # MQTT to TimescaleDB Bridge
  mqtt-bridge:
    build:
      context: .
      dockerfile: docker/mqtt-bridge/Dockerfile
    container_name: manufacturing-mqtt-bridge
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/manufacturing
      - MQTT_URL=mqtt://mosquitto:1883
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - manufacturing-net
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  redis-data:
    driver: local
  mosquitto-data:
    driver: local
  mosquitto-logs:
    driver: local
  loki-data:
    driver: local

networks:
  manufacturing-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16