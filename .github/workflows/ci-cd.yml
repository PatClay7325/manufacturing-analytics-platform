name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'release/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DATABASE_URL: postgresql://test:test@localhost:5432/test
  DIRECT_DATABASE_URL: postgresql://test:test@localhost:5432/test
  NEXTAUTH_URL: http://localhost:3000
  NEXTAUTH_SECRET: test-secret-for-ci
  AUTH_TOKEN_SALT: test-salt-32-characters-or-longer
  EMBED_API_URL: https://api.example.com/embeddings
  OLLAMA_BASE_URL: http://localhost:11434
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=high
          
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check TypeScript
        run: npm run typecheck
      
      - name: Check code formatting
        run: npm run format -- --check

  test:
    name: Test with 100% Coverage
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Setup test database
        run: npx prisma db push
      
      - name: Run tests with production config
        env:
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: npm run test:production:coverage
      
      - name: Check coverage thresholds
        run: |
          echo "Checking 100% coverage requirement..."
          npx nyc check-coverage --lines 100 --functions 100 --branches 100 --statements 100
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: true
          verbose: true

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Run database migrations
        run: npx prisma migrate deploy
      
      - name: Build application
        run: npm run build
      
      - name: Run E2E tests
        run: npm run test:e2e
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build:
    name: Build Production Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, lint, test, e2e]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: https://staging.manufacturing.example.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Deploy to Staging
        run: |
          helm upgrade --install manufacturing-analytics-staging \
            ./helm/manufacturing-analytics \
            --namespace staging \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set ingress.hosts[0].host=staging.manufacturing.example.com \
            --wait \
            --timeout 10m

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://manufacturing.example.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      
      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Get current deployment
        id: current
        run: |
          echo "revision=$(helm list -n production -o json | jq -r '.[] | select(.name=="manufacturing-analytics") | .revision')" >> $GITHUB_OUTPUT
      
      - name: Deploy with Helm
        id: deploy
        run: |
          helm upgrade --install manufacturing-analytics \
            ./helm/manufacturing-analytics \
            --namespace production \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --wait \
            --timeout 10m
      
      - name: Run smoke tests
        id: smoke-test
        run: |
          kubectl run smoke-test-${{ github.run_id }} \
            --image=curlimages/curl:latest \
            --rm \
            -i \
            --restart=Never \
            -n production \
            -- curl -f http://manufacturing-analytics.production.svc.cluster.local/api/health
      
      - name: Check Prometheus metrics
        run: |
          kubectl run metrics-check-${{ github.run_id }} \
            --image=curlimages/curl:latest \
            --rm \
            -i \
            --restart=Never \
            -n production \
            -- curl -f http://manufacturing-analytics.production.svc.cluster.local/api/metrics
      
      - name: Automatic rollback on failure
        if: failure() && steps.deploy.outcome == 'success'
        run: |
          echo "Deployment failed, rolling back to revision ${{ steps.current.outputs.revision }}..."
          helm rollback manufacturing-analytics ${{ steps.current.outputs.revision }} -n production
          exit 1