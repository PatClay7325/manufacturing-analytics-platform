name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop, main-Production-ready-code ]
  pull_request:
    branches: [ main, develop, main-Production-ready-code ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quality Checks
  lint-and-format:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript compilation
        run: npm run build

      - name: Run Prettier format check
        run: npm run format:check

  # Security Scanning
  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Run dependency vulnerability check
        run: npx audit-ci --config audit-ci.json

      - name: SAST with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Database & Schema Tests
  database-tests:
    name: Database Schema & Migration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: manufacturing_test
          TIMESCALEDB_TELEMETRY: 'off'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.test .env
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/manufacturing_test" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env

      - name: Run database migrations
        run: |
          npx prisma db push --accept-data-loss
          npx prisma generate

      - name: Apply TimescaleDB schema
        run: |
          docker exec -i $(docker ps -q --filter ancestor=timescale/timescaledb:latest-pg15) psql -U test_user -d manufacturing_test < schema/iso-22400-timescaledb.sql || true

      - name: Run database tests
        run: npm run test:database

      - name: Seed test data
        run: npx tsx scripts/seed-iso-sample-data.ts

      - name: Test ISO 22400 calculations
        run: npm run test:iso-calculations

  # Unit & Integration Tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: manufacturing_test
          TIMESCALEDB_TELEMETRY: 'off'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.test .env
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/manufacturing_test" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env

      - name: Setup database
        run: |
          npx prisma db push --accept-data-loss
          npx prisma generate

      - name: Run unit tests
        run: npm run test:unit -- --coverage

      - name: Run integration tests
        run: npm run test:integration

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests

  # E2E Tests with Playwright
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: manufacturing_test
          TIMESCALEDB_TELEMETRY: 'off'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.test .env
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/manufacturing_test" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "NEXTAUTH_SECRET=test-secret-for-ci" >> .env
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env

      - name: Setup database
        run: |
          npx prisma db push --accept-data-loss
          npx prisma generate
          npx tsx scripts/seed-iso-sample-data.ts

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Performance & Load Tests
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: manufacturing_test
          TIMESCALEDB_TELEMETRY: 'off'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.test .env
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/manufacturing_test" >> .env

      - name: Setup database with large dataset
        run: |
          npx prisma db push --accept-data-loss
          npx prisma generate
          npm run seed:performance-test

      - name: Run API performance tests
        run: npm run test:performance

      - name: Run database query performance tests
        run: npm run test:db-performance

      - name: Generate performance report
        run: npm run performance:report

  # Container Build & Security Scan
  container-build:
    name: Container Build & Scan
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan]
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deployment Jobs
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, container-build]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main-Production-ready-code'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d

      - name: Run staging smoke tests
        run: |
          echo "Running staging smoke tests..."
          npm run test:smoke -- --env=staging

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/main-Production-ready-code'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add actual production deployment commands here
          # Example: kubectl apply -f k8s/production/
          # Example: docker-compose -f docker-compose.production.yml up -d

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          npm run test:smoke -- --env=production

      - name: Update deployment tracking
        run: |
          echo "Updating deployment tracking..."
          # Add deployment tracking/monitoring setup

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Release Management
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/main-Production-ready-code'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Deployment Information
            - **Environment**: Production
            - **Build**: ${{ github.sha }}
            - **Deployed**: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false