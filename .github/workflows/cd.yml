name: CD

on:
  push:
    branches:
      - main-Production-ready-code  # Deploy to production
      - develop-Integration-branch  # Deploy to staging
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop-Integration-branch'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma client
        run: npm run prisma:generate
      
      - name: Build project
        run: npm run build
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel (Staging)
        id: deploy
        run: |
          DEPLOY_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "::set-output name=url::$DEPLOY_URL"
          echo "Deployed to $DEPLOY_URL"
      
      - name: Run Post-Deployment Tests
        run: |
          echo "Running smoke tests against ${{ steps.deploy.outputs.url }}"
          # Add your post-deployment verification tests here
          # npm run test:e2e:smoke -- --base-url=${{ steps.deploy.outputs.url }}
      
      - name: Add Deployment Comment to PR (if from PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Staging deployment completed! Preview URL: ${{ steps.deploy.outputs.url }}'
            })

  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main-Production-ready-code'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy-prod.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma client
        run: npm run prisma:generate
      
      - name: Build project
        run: npm run build
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel (Production)
        id: deploy-prod
        run: |
          DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "::set-output name=url::$DEPLOY_URL"
          echo "Deployed to $DEPLOY_URL"
      
      - name: Run Post-Deployment Verification
        run: |
          echo "Running production verification against ${{ steps.deploy-prod.outputs.url }}"
          # Add production health check or verification
          # curl -f ${{ steps.deploy-prod.outputs.url }}/api/health
      
      - name: Create Deployment Release Tag
        run: |
          CURRENT_DATE=$(date +'%Y-%m-%d')
          VERSION="v1.0.0-${CURRENT_DATE}-${GITHUB_SHA::7}"
          git tag -a $VERSION -m "Production release $VERSION"
          git push origin $VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Send Deployment Notification
        run: |
          echo "Sending deployment notification"
          # Add notification code here (Slack, Email, etc.)
          # curl -X POST -H "Content-type: application/json" \
          #   --data '{"text":"New production deployment: ${{ steps.deploy-prod.outputs.url }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}