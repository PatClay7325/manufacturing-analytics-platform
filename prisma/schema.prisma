generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch", "metrics"]
  binaryTargets   = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model ProductionOrder {
  id              String         @id @default(cuid())
  orderNumber     String         @unique
  product         String
  quantity        Int
  targetStartDate DateTime
  targetEndDate   DateTime
  actualStartDate DateTime?
  actualEndDate   DateTime?
  status          String         @default("scheduled")
  priority        Int            @default(3)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  workCenterId    String
  WorkCenter      WorkCenter     @relation(fields: [workCenterId], references: [id])
  qualityChecks   QualityCheck[]

  @@index([status])
  @@index([orderNumber])
  @@index([workCenterId])
}

model MaintenanceRecord {
  id              String    @id @default(cuid())
  maintenanceType String
  description     String
  technician      String
  startTime       DateTime
  endTime         DateTime?
  status          String    @default("scheduled")
  notes           String?
  parts           String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  workUnitId      String
  WorkUnit        WorkUnit  @relation(fields: [workUnitId], references: [id])

  @@index([status])
  @@index([maintenanceType])
  @@index([workUnitId])
}

model PerformanceMetric {
  id                String   @id @default(cuid())
  timestamp         DateTime @default(now())
  availability      Float?
  performance       Float?
  quality           Float?
  oeeScore          Float?
  runTime           Float?
  plannedDowntime   Float?
  unplannedDowntime Float?
  idealCycleTime    Float?
  actualCycleTime   Float?
  totalParts        Int?
  goodParts         Int?
  shift             String?
  operator          String?
  notes             String?
  createdAt         DateTime @default(now())
  workUnitId        String
  WorkUnit          WorkUnit @relation(fields: [workUnitId], references: [id])

  @@index([timestamp])
  @@index([workUnitId, timestamp])
}

model QualityMetric {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  parameter    String
  value        Float
  uom          String
  lowerLimit   Float?
  upperLimit   Float?
  nominal      Float?
  isWithinSpec Boolean
  deviation    Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  workUnitId   String
  WorkUnit     WorkUnit @relation(fields: [workUnitId], references: [id])

  @@index([parameter])
  @@index([isWithinSpec])
  @@index([workUnitId, timestamp])
}

model QualityCheck {
  id                String          @id @default(cuid())
  productionOrderId String
  checkType         String
  inspector         String
  timestamp         DateTime        @default(now())
  result            String
  notes             String?
  defectTypes       String[]
  defectCounts      Int[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  productionOrder   ProductionOrder @relation(fields: [productionOrderId], references: [id])

  @@index([productionOrderId])
  @@index([result])
  @@index([checkType])
}

model Alert {
  id             String    @id @default(cuid())
  alertType      String
  severity       String
  message        String
  status         String    @default("active")
  timestamp      DateTime  @default(now())
  acknowledgedBy String?
  acknowledgedAt DateTime?
  resolvedBy     String?
  resolvedAt     DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  workUnitId     String?
  WorkUnit       WorkUnit? @relation(fields: [workUnitId], references: [id])

  @@index([alertType])
  @@index([severity])
  @@index([status])
  @@index([workUnitId])
}

model User {
  id               String              @id @default(cuid())
  email            String              @unique
  name             String?
  role             String              @default("user")
  department       String?
  passwordHash     String
  lastLogin        DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  siteId           String?
  teamId           String?
  Dashboard        Dashboard[]
  Site             Site?               @relation(fields: [siteId], references: [id])
  Team             Team?               @relation(fields: [teamId], references: [id])
  TeamMembers      TeamMember[]
  ApiKeys          ApiKey[]
  CreatedFolders   DashboardFolder[]   @relation("CreatedFolders")
  Annotations      Annotation[]
  DashboardSnapshot DashboardSnapshot[]

  @@index([email])
  @@index([role])
  @@index([siteId])
  @@index([teamId])
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  siteId      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Site        Site?        @relation(fields: [siteId], references: [id])
  Users       User[]
  TeamMembers TeamMember[]

  @@index([name])
  @@index([siteId])
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      String   @default("member") // admin, member
  joinedAt  DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  userId      String
  permissions String[]  // Array of permission strings
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([key])
  @@index([userId])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([category])
}

model Area {
  id             String          @id
  siteId         String
  name           String
  code           String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  Site           Site            @relation(fields: [siteId], references: [id])
  AreaKPISummary AreaKPISummary?
  WorkCenter     WorkCenter[]

  @@index([code])
  @@index([siteId])
}

model AreaKPISummary {
  id                String   @id
  areaId            String   @unique
  oee               Float
  availability      Float
  performance       Float
  quality           Float
  mtbf              Float
  mttr              Float
  productionCount   BigInt
  scrapRate         Float
  energyConsumption BigInt
  periodStart       DateTime
  periodEnd         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  Area              Area     @relation(fields: [areaId], references: [id])

  @@index([areaId, periodStart, periodEnd])
}

model Dashboard {
  id        String           @id
  uid       String           @unique
  title     String
  slug      String           @unique
  version   Int              @default(1)
  panels    Json
  variables Json?
  time      Json?
  refresh   String?
  tags      String[]
  isStarred Boolean          @default(false)
  isPublic  Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime
  createdBy String?
  updatedBy String?
  folderId  String?
  User      User?            @relation(fields: [createdBy], references: [id])
  Folder    DashboardFolder? @relation(fields: [folderId], references: [id])

  @@index([slug])
  @@index([tags])
  @@index([folderId])
}

model DowntimeCause {
  id          String   @id
  workUnitId  String
  cause       String
  hours       Float
  percentage  Float
  periodStart DateTime
  periodEnd   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  WorkUnit    WorkUnit @relation(fields: [workUnitId], references: [id])

  @@index([cause])
  @@index([workUnitId, periodStart, periodEnd])
}

model Enterprise {
  id                   String                @id
  name                 String
  code                 String                @unique
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  EnterpriseKPISummary EnterpriseKPISummary?
  Site                 Site[]

  @@index([code])
}

model EnterpriseKPISummary {
  id                String     @id
  enterpriseId      String     @unique
  oee               Float
  availability      Float
  performance       Float
  quality           Float
  mtbf              Float
  mttr              Float
  productionCount   BigInt
  scrapRate         Float
  energyConsumption BigInt
  periodStart       DateTime
  periodEnd         DateTime
  createdAt         DateTime   @default(now())
  updatedAt         DateTime
  Enterprise        Enterprise @relation(fields: [enterpriseId], references: [id])

  @@index([enterpriseId, periodStart, periodEnd])
}

model Metric {
  id         String   @id
  workUnitId String
  timestamp  DateTime @default(now())
  name       String
  value      Float
  unit       String?
  tags       Json?
  source     String?
  quality    Float?
  createdAt  DateTime @default(now())
  WorkUnit   WorkUnit @relation(fields: [workUnitId], references: [id])

  @@index([name, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)])
  @@index([workUnitId, name, timestamp(sort: Desc)])
}

model Product {
  id               String         @id
  productionDataId String
  partNumber       String
  description      String
  cycleTime        Int
  output           Int
  rejects          Int
  oee              Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  ProductionData   ProductionData @relation(fields: [productionDataId], references: [id])

  @@index([partNumber])
  @@index([productionDataId])
}

model ProductionData {
  id         String    @id
  workUnitId String
  month      String
  year       Int
  actual     Int
  target     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  Product    Product[]
  WorkUnit   WorkUnit  @relation(fields: [workUnitId], references: [id])

  @@unique([workUnitId, year, month])
  @@index([workUnitId, year, month])
}

model Site {
  id             String          @id
  enterpriseId   String
  name           String
  code           String          @unique
  location       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  Area           Area[]
  Enterprise     Enterprise      @relation(fields: [enterpriseId], references: [id])
  SiteKPISummary SiteKPISummary?
  User           User[]
  Team           Team[]

  @@index([code])
  @@index([enterpriseId])
}

model SiteKPISummary {
  id                String   @id
  siteId            String   @unique
  oee               Float
  availability      Float
  performance       Float
  quality           Float
  mtbf              Float
  mttr              Float
  productionCount   BigInt
  scrapRate         Float
  energyConsumption BigInt
  periodStart       DateTime
  periodEnd         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  Site              Site     @relation(fields: [siteId], references: [id])

  @@index([siteId, periodStart, periodEnd])
}

model WorkCenter {
  id                   String                @id
  areaId               String
  name                 String
  code                 String                @unique
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  ProductionOrder      ProductionOrder[]
  Area                 Area                  @relation(fields: [areaId], references: [id])
  WorkCenterKPISummary WorkCenterKPISummary?
  WorkUnit             WorkUnit[]

  @@index([areaId])
  @@index([code])
}

model WorkCenterKPISummary {
  id                String     @id
  workCenterId      String     @unique
  oee               Float
  availability      Float
  performance       Float
  quality           Float
  mtbf              Float
  mttr              Float
  productionCount   BigInt
  scrapRate         Float
  energyConsumption BigInt
  periodStart       DateTime
  periodEnd         DateTime
  createdAt         DateTime   @default(now())
  updatedAt         DateTime
  WorkCenter        WorkCenter @relation(fields: [workCenterId], references: [id])

  @@index([workCenterId, periodStart, periodEnd])
}

model WorkUnit {
  id                 String              @id
  workCenterId       String
  name               String
  code               String              @unique
  equipmentType      String
  model              String
  serialNumber       String              @unique
  manufacturerCode   String
  installationDate   DateTime
  status             String              @default("operational")
  location           String?
  description        String?
  lastMaintenanceAt  DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  Alert              Alert[]
  DowntimeCause      DowntimeCause[]
  MaintenanceRecord  MaintenanceRecord[]
  Metric             Metric[]
  PerformanceMetric  PerformanceMetric[]
  ProductionData     ProductionData[]
  QualityMetric      QualityMetric[]
  WorkCenter         WorkCenter          @relation(fields: [workCenterId], references: [id])
  WorkUnitKPISummary WorkUnitKPISummary?

  @@index([code])
  @@index([equipmentType])
  @@index([serialNumber])
  @@index([status])
  @@index([workCenterId])
}

model WorkUnitKPISummary {
  id                String   @id
  workUnitId        String   @unique
  oee               Float
  availability      Float
  performance       Float
  quality           Float
  mtbf              Float
  mttr              Float
  productionCount   BigInt
  scrapRate         Float
  energyConsumption BigInt
  periodStart       DateTime
  periodEnd         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  WorkUnit          WorkUnit @relation(fields: [workUnitId], references: [id])

  @@index([workUnitId, periodStart, periodEnd])
}

model DashboardFolder {
  id          String      @id @default(cuid())
  name        String
  description String?
  permission  String      @default("private") // private, team, public
  tags        String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String
  User        User        @relation("CreatedFolders", fields: [createdBy], references: [id])
  dashboards  Dashboard[]

  @@index([createdBy])
  @@index([permission])
}

model ErrorLog {
  id             String   @id @default(cuid())
  errorId        String   @unique
  message        String
  stack          String?
  componentStack String?
  context        String?
  userAgent      String?
  url            String?
  ipAddress      String?
  timestamp      DateTime @default(now())
  severity       String   @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  resolved       Boolean  @default(false)
  resolvedBy     String?
  resolvedAt     DateTime?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([severity, resolved])
  @@index([timestamp])
  @@index([errorId])
}

model Annotation {
  id          String   @id @default(cuid())
  dashboardId String?
  panelId     String?
  type        String   // point, region, event, alert, milestone
  title       String
  text        String?
  tags        String[]
  time        DateTime
  timeEnd     DateTime?
  userId      String
  isRegion    Boolean  @default(false)
  color       String?
  icon        String?
  url         String?
  newState    String?
  prevState   String?
  data        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])

  @@index([dashboardId, time])
  @@index([type, time])
  @@index([userId])
}

model DashboardSnapshot {
  id          String   @id @default(cuid())
  dashboardId String
  title       String
  description String?
  config      Json     // Dashboard configuration at time of snapshot
  data        Json?    // Optional data snapshot
  imageUrl    String?  // URL to generated image
  userId      String
  isPublic    Boolean  @default(false)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])

  @@index([dashboardId, createdAt])
  @@index([userId])
  @@index([isPublic, expiresAt])
}
