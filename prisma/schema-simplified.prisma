// Simplified Manufacturing Analytics Schema
// Focus on core functionality first, add complexity as needed

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models Only - Start Simple

// 1. Equipment - The heart of manufacturing
model Equipment {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., "CNC-001"
  name        String
  type        String   // CNC, Welder, etc.
  siteId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  site        Site     @relation(fields: [siteId], references: [id])
  metrics     Metric[]
  alerts      Alert[]
  
  @@index([siteId])
  @@index([type])
  @@index([isActive])
}

// 2. Sites - Manufacturing locations
model Site {
  id          String     @id @default(cuid())
  code        String     @unique // e.g., "DETROIT"
  name        String
  timezone    String     @default("UTC")
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  equipment   Equipment[]
  users       User[]
  
  @@index([isActive])
}

// 3. Metrics - Time-series data (will become hypertable)
model Metric {
  id          String    @id @default(cuid())
  timestamp   DateTime  @db.Timestamptz
  equipmentId String
  metricType  String    // "temperature", "pressure", "speed", etc.
  value       Float
  unit        String
  quality     Int       @default(192) // OPC quality code
  
  // Relations
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  
  @@unique([timestamp, equipmentId, metricType])
  @@index([equipmentId, timestamp])
  @@index([metricType, timestamp])
  @@map("metrics")
}

// 4. OEE Data - Separate table for OEE calculations
model OEEData {
  id              String    @id @default(cuid())
  timestamp       DateTime  @db.Timestamptz
  equipmentId     String
  shiftStartTime  DateTime
  shiftEndTime    DateTime
  
  // OEE Components (stored as percentages 0-100)
  availability    Float
  performance     Float
  quality         Float
  oee             Float     // Calculated: A * P * Q
  
  // Supporting data
  plannedTime     Int       // minutes
  runTime         Int       // minutes
  idealCycleTime  Float     // seconds
  totalCount      Int
  goodCount       Int
  
  // Relations
  equipment       Equipment @relation(fields: [equipmentId], references: [id])
  
  @@unique([timestamp, equipmentId])
  @@index([equipmentId, timestamp])
  @@map("oee_data")
}

// 5. Alerts - Simple alert system
model Alert {
  id          String    @id @default(cuid())
  timestamp   DateTime  @default(now())
  equipmentId String
  severity    String    // "low", "medium", "high", "critical"
  type        String    // "oee_low", "maintenance_due", etc.
  message     String
  isActive    Boolean   @default(true)
  acknowledged Boolean  @default(false)
  acknowledgedAt DateTime?
  acknowledgedBy String?
  
  // Relations
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  
  @@index([equipmentId, isActive])
  @@index([severity, isActive])
  @@index([timestamp])
}

// 6. Users - Simple user model
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String
  role        String    @default("operator") // operator, supervisor, admin
  siteId      String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  site        Site?     @relation(fields: [siteId], references: [id])
  sessions    Session[]
  
  @@index([email])
  @@index([siteId])
}

// 7. Sessions - For authentication
model Session {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

// That's it! Start with these 7 core tables
// Add more tables only when actually needed